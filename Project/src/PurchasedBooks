import jdk.jshell.spi.ExecutionControl;

import java.awt.*;
import java.awt.desktop.UserSessionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

public class PurchasedBooks {

    public ArrayList<Book> books = new ArrayList<>();
    DefaultListModel<Book> model;
    public PurchasedBooks(ArrayList<Book> books) {
        this.books = books;
    }

    public void createAndShowGUI() {
        JFrame frame = new JFrame("Book List Demo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Create a button and add an action listener
        JButton exit = new JButton("Exit");
        exit.addActionListener(e -> {
            frame.setVisible(false);
            BookStoreHomePage.getBookStoreHomePage().setVisible(true);
        });

        JButton chInventory = new JButton("Change Inventory");
        chInventory.setFont(new Font("Arial", Font.PLAIN, 15));
        chInventory.setSize(200, 20);
        chInventory.setLocation(20, 25);

        JTextField tchInventory = new JTextField();
        tchInventory.setFont(new Font("Arial", Font.PLAIN, 15));
        tchInventory.setSize(280, 20);
        tchInventory.setDocument(new NumberDocument());
        tchInventory.setLocation(250, 25);
        chInventory.addActionListener(e -> {
            if (tchInventory.getText().isEmpty())
                tchInventory.setText("0");
            User.currentUser.changeInventory(Long.parseLong(tchInventory.getText()));
        });

        // Create a panel and add the button to the top
        JPanel panel = new JPanel(new BorderLayout());
        panel.add(exit, BorderLayout.NORTH);
        panel.add(chInventory);
        panel.add(tchInventory);
        // Create a list model and add some image URLs
        model = new DefaultListModel<>();


        // Create a list and set the cell renderer
        JList<Book> list = new JList<Book>(model);
        list.setCellRenderer(new ImageCellRenderer());

        // Add the list to the center of the panel
        panel.add(list, BorderLayout.CENTER);

        // Add the panel to the frame
        frame.add(panel);
        frame.pack();
        frame.setSize(600, 500);

        try {
            Image image = ImageIO.read(new File("C:\\Users\\ASUS\\OneDrive\\Documents\\Semester3\\Project\\src\\book3.jpg"));
            frame.setIconImage(image);
        } catch (IOException e) {
            System.out.println("Erorr " + e);
        }

        frame.setVisible(true);
        loadBooks();
    }

    // A custom cell renderer that displays an image icon
    class ImageCellRenderer implements ListCellRenderer<Book> {

        private JLabel label;

        public ImageCellRenderer() {
            label = new JLabel();
            label.setHorizontalAlignment(JLabel.CENTER);
        }

        @Override
        public Component getListCellRendererComponent(JList<? extends Book> list, Book book, int index, boolean isSelected, boolean cellHasFocus) {
            try {
                // Read the image from the URL and scale it
                Image image = ImageIO.read(new File(book.getImageName()));
                image = image.getScaledInstance(100, 100, Image.SCALE_SMOOTH);

                // Set the icon and the text of the label
                label.setIcon(new ImageIcon(image));
                label.setText(book.toString());
            } catch (IOException e) {
                e.printStackTrace();
            }
            return label;
        }


    }
    public void loadBooks() {
        for (Book book : books) {
            model.addElement(book); // add the book to the model
        }
    }
}
